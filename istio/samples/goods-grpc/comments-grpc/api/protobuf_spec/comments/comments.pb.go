// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/protobuf_spec/comments/comments.proto

/*
Package comments is a generated protocol buffer package.

It is generated from these files:
	api/protobuf_spec/comments/comments.proto

It has these top-level messages:
	GetCommentsByGoodIDRequest
	CommentInfo
	GetCommentsByGoodIDResponse
*/
package comments

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetCommentsByGoodIDRequest struct {
	GoodID int64 `protobuf:"varint,1,opt,name=goodID" json:"goodID,omitempty"`
}

func (m *GetCommentsByGoodIDRequest) Reset()                    { *m = GetCommentsByGoodIDRequest{} }
func (m *GetCommentsByGoodIDRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCommentsByGoodIDRequest) ProtoMessage()               {}
func (*GetCommentsByGoodIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetCommentsByGoodIDRequest) GetGoodID() int64 {
	if m != nil {
		return m.GoodID
	}
	return 0
}

type CommentInfo struct {
	UserID   int64  `protobuf:"varint,1,opt,name=userID" json:"userID,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	UserPic  string `protobuf:"bytes,3,opt,name=userPic" json:"userPic,omitempty"`
	Comments string `protobuf:"bytes,4,opt,name=comments" json:"comments,omitempty"`
}

func (m *CommentInfo) Reset()                    { *m = CommentInfo{} }
func (m *CommentInfo) String() string            { return proto.CompactTextString(m) }
func (*CommentInfo) ProtoMessage()               {}
func (*CommentInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommentInfo) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *CommentInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CommentInfo) GetUserPic() string {
	if m != nil {
		return m.UserPic
	}
	return ""
}

func (m *CommentInfo) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

type GetCommentsByGoodIDResponse struct {
	Comments []*CommentInfo `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty"`
}

func (m *GetCommentsByGoodIDResponse) Reset()                    { *m = GetCommentsByGoodIDResponse{} }
func (m *GetCommentsByGoodIDResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCommentsByGoodIDResponse) ProtoMessage()               {}
func (*GetCommentsByGoodIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetCommentsByGoodIDResponse) GetComments() []*CommentInfo {
	if m != nil {
		return m.Comments
	}
	return nil
}

func init() {
	proto.RegisterType((*GetCommentsByGoodIDRequest)(nil), "comments.GetCommentsByGoodIDRequest")
	proto.RegisterType((*CommentInfo)(nil), "comments.CommentInfo")
	proto.RegisterType((*GetCommentsByGoodIDResponse)(nil), "comments.GetCommentsByGoodIDResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CommentsService service

type CommentsServiceClient interface {
	GetCommentsByGoooID(ctx context.Context, in *GetCommentsByGoodIDRequest, opts ...grpc.CallOption) (*GetCommentsByGoodIDResponse, error)
}

type commentsServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommentsServiceClient(cc *grpc.ClientConn) CommentsServiceClient {
	return &commentsServiceClient{cc}
}

func (c *commentsServiceClient) GetCommentsByGoooID(ctx context.Context, in *GetCommentsByGoodIDRequest, opts ...grpc.CallOption) (*GetCommentsByGoodIDResponse, error) {
	out := new(GetCommentsByGoodIDResponse)
	err := grpc.Invoke(ctx, "/comments.CommentsService/GetCommentsByGoooID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommentsService service

type CommentsServiceServer interface {
	GetCommentsByGoooID(context.Context, *GetCommentsByGoodIDRequest) (*GetCommentsByGoodIDResponse, error)
}

func RegisterCommentsServiceServer(s *grpc.Server, srv CommentsServiceServer) {
	s.RegisterService(&_CommentsService_serviceDesc, srv)
}

func _CommentsService_GetCommentsByGoooID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsByGoodIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).GetCommentsByGoooID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments.CommentsService/GetCommentsByGoooID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).GetCommentsByGoooID(ctx, req.(*GetCommentsByGoodIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comments.CommentsService",
	HandlerType: (*CommentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommentsByGoooID",
			Handler:    _CommentsService_GetCommentsByGoooID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf_spec/comments/comments.proto",
}

func init() { proto.RegisterFile("api/protobuf_spec/comments/comments.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0x8b, 0x2f, 0x2e, 0x48, 0x4d, 0xd6, 0x4f, 0xce,
	0xcf, 0xcd, 0x4d, 0xcd, 0x2b, 0x29, 0x86, 0x33, 0xf4, 0xc0, 0xf2, 0x42, 0x1c, 0x30, 0xbe, 0x92,
	0x09, 0x97, 0x94, 0x7b, 0x6a, 0x89, 0x33, 0x94, 0xeb, 0x54, 0xe9, 0x9e, 0x9f, 0x9f, 0xe2, 0xe9,
	0x12, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc6, 0xc5, 0x96, 0x0e, 0x16, 0x90, 0x60,
	0x54, 0x60, 0xd4, 0x60, 0x0e, 0x82, 0xf2, 0x94, 0xca, 0xb9, 0xb8, 0xa1, 0x5a, 0x3c, 0xf3, 0xd2,
	0xf2, 0x41, 0xca, 0x4a, 0x8b, 0x53, 0x8b, 0x10, 0xca, 0x20, 0x3c, 0x21, 0x29, 0x2e, 0x0e, 0x10,
	0xcb, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0x33, 0x08, 0xce, 0x17, 0x92, 0xe0,
	0x62, 0x07, 0xb1, 0x03, 0x32, 0x93, 0x25, 0x98, 0xc1, 0x52, 0x30, 0x2e, 0x48, 0x17, 0xcc, 0x79,
	0x12, 0x2c, 0x10, 0x5d, 0x70, 0xe7, 0x06, 0x70, 0x49, 0x63, 0x75, 0x6e, 0x71, 0x41, 0x7e, 0x5e,
	0x71, 0xaa, 0x90, 0x21, 0x92, 0x56, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x51, 0x3d, 0xb8, 0xd7,
	0x91, 0x5c, 0x8c, 0x30, 0xd1, 0xa8, 0x9c, 0x8b, 0x1f, 0x66, 0x5c, 0x70, 0x6a, 0x51, 0x59, 0x66,
	0x72, 0xaa, 0x50, 0x0a, 0x97, 0x30, 0xba, 0x25, 0xf9, 0x9e, 0x2e, 0x42, 0x2a, 0x08, 0xa3, 0x70,
	0x07, 0x99, 0x94, 0x2a, 0x01, 0x55, 0x10, 0x97, 0x2a, 0x31, 0x24, 0xb1, 0x81, 0xa3, 0xc2, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x96, 0xec, 0x0c, 0x22, 0xb7, 0x01, 0x00, 0x00,
}
